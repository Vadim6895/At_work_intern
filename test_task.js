/*
1. Опишите, что такое инкапсуляция, наследование и полиморфизм. Приведите примеры их применения в коде.
  Инкапсуляция - принцип разделения логики на внутренний и внешний интерфейс в рамках ООП. Позволяющий отделять публичные методы от приватных.
  Наследование - механизм наследовании одного класса другим классом нужен для сокращение дублирования кода (DRY), упрощение чтения, более логичного создания иерархии объектов
  Полиморфизм - логика при которой разные объекты могут реагировать по своему на один и тот же запрос
    Новые классы, реализующие общий интерфейс, могут быть легко интегрированы в существующую систему.
    Общий интерфейс или абстрактный базовый класс позволяют описать общее поведение, и каждый конкретный класс реализует только свою специфичную логику.


2. Опишите, как бы вы восстановили предыдущую версию кода в git после внесения ошибки
    Если рассматривать простой вариант в котором коммит был сделан и запушен в репозиторий, то есть несколько вариантов:
      1) Создать новый коммит и вручную удалить все изменения (не подойдёт если изменений много)
      2) Использовать git revert id (id - идентификатор коммита) создаст новый коммит на каждый отменяемый коммит если их несколько

      Вопрос довольно поверхностно задан в плане внесения ошибки.
      1) Ошибка может быть внесена в рабочую область но коммит при этом не создан тогда может помочь git stash save(с сохранением) или git reset --hard HEAD
      2) Коммиты могли быть созданы но не опубликованы в удаленом репозитории , тогда можно использовать git reset id


4. Кратко расскажите о вашем опыте в IT и поделитесь ссылкой на проекты на GitHub, если они у вас есть.
  Есть 2 года опыта в IT в роли frontend разработчика, стек технологий с которыми работал можно увидеть в резюме.
  В моём резюме есть ссылки на коммерческие проекты те которые могу показать (в виду отсутствия nda), но там нет исходников.
  проекты c github :
  https://github.com/Vadim6895/cinemaddict-11 (javascript webpack es6 chartjs momentjs)
  https://github.com/Vadim6895/what-to-watch-4 (react redux webpack enzyme jest)
  https://github.com/Vadim6895/movieDB (react, scss modules, RTK, TS, webpack) Пет проект незавершен полностью.

  
3. Напишите функцию на любом языке, которая проверяет, является ли строка палиндромом
    Это простой и короткий вариант ф-ции, поскольку требований к конкретной реализации нету.
    ф-ция не учитывает регистр, может сравнить строки с пробельными символами
    Также ф-ция может быть усложнена например добавлением проверки символа '.' в конце фразы и прочих нюансов...
*/
function isPalindrom(str) {
  return (
    str.toLowerCase().split(' ').join('') ===
    str.toLowerCase().split(' ').join('').split('').reverse().join('')
  );
}

isPalindrom('404'); // true
isPalindrom('4040'); // false
isPalindrom('Тут как тут'); // true
isPalindrom('Коту тащат уток'); // true
